name: Package

on:
  workflow_call:
    secrets:
      PYPI_SERVER:
        required: true
      PYPI_LOGIN:
        required: true
      PYPI_PASSWORD:
        required: true
    inputs:
      EXTRA_POETRY_INJECT_ARGS:
        required: false
        default: ""
        type: string

jobs:
  build_wheel_windows_and_macos:
    name: Build wheels for ${{ matrix.name }}
    strategy:
      matrix:
        include:
        - name: Windows
          uses: windows-2022
          extra-target: ""
        - name: MacOS
          uses: macos-11
          extra-target: aarch64-apple-darwin

    runs-on: ${{ matrix.uses }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          submodules: recursive

      - uses: actions/setup-python@v4
        with:
          python-version: '3.8'

      - name: Install specific pip version
        run: python3 -m pip install --upgrade pip==21.3.1

      - name: Install pipx
        run: pip install pipx==1.1.0

      - name: Install poetry etc into pipx environment
        run: |
          pipx install poetry==1.1.14
          pipx install poethepoet==0.16.0
          pipx install maturin==0.13.2

      - name: Install Poetry dynamic versioning
        run: pipx inject poetry poetry-dynamic-versioning==0.13.1 ${{ inputs.EXTRA_POETRY_INJECT_ARGS }}

      - name: Install additional Python dependencies
        run: |
          pip install tomlkit
          pipx install poetry==1.1.14
          pipx install poethepoet==0.16.0
          pipx install maturin==0.13.2

      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          target: ${{ matrix.extra-target }}
          override: true

      - name: Build wheel
        run: poetry build -f wheel

      - uses: actions/upload-artifact@v3
        with:
          name: wheel-${{ matrix.uses }}
          path: ./dist/*whl
          if-no-files-found: error
          retention-days: 1

  upload_wheels:
    needs: build_wheel_windows_and_macos
    if: github.event_name == 'push'
    container: ghcr.io/oxionics/poetry:1.19
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Check if files other than poetry.lock have changed
        id: poetry-lock-changed
        uses: tj-actions/changed-files@v35
        with:
          files: poetry.lock

      - uses: actions/download-artifact@v3
        if: steps.poetry-lock-changed.outputs.only_modified == 'false'
        with:
          path: ./artifacts

      - name: Extract wheels
        if: steps.poetry-lock-changed.outputs.only_modified == 'false'
        run: |
          mkdir -p dist
          mv artifacts/*/* dist

      - name: Install Poetry dynamic versioning
        if: steps.poetry-lock-changed.outputs.only_modified == 'false'
        run: pipx inject poetry poetry-dynamic-versioning==0.13.1 ${{ inputs.EXTRA_POETRY_INJECT_ARGS }}

      - name: Configure poetry
        if: steps.poetry-lock-changed.outputs.only_modified == 'false'
        run: |
          poetry config repositories.oxionics ${{ secrets.PYPI_SERVER }}
          poetry config http-basic.oxionics \
            ${{ secrets.PYPI_LOGIN }} ${{ secrets.PYPI_PASSWORD }}

      - name: Upload wheel
        if: steps.poetry-lock-changed.outputs.only_modified == 'false'
        run: poetry publish -r oxionics
