name: Package

on:
  workflow_call:
    secrets:
      PYPI_SERVER:
        required: true
      PYPI_LOGIN:
        required: true
      PYPI_PASSWORD:
        required: true
    inputs:
      EXTRA_POETRY_INJECT_ARGS:
        required: false
        default: ""
        type: string
      CHECK_PACKAGE_VERSION:
        required: false
        default: true
        type: boolean

jobs:
  build_wheels:
    name: Build wheels for Python ${{ matrix.python }} on ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-20.04, windows-2022]
        python: ["3.10"]

    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive

      - uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python }}

      - name: Install specific pip version
        run: python3 -m pip install --upgrade pip==21.3.1

      - name: Install pipx
        run: pip install pipx==1.1.0 tomlkit

      - name: Install poetry etc into pipx environment
        run: |
          pipx install poetry==1.6.1
          pipx install poethepoet==0.22.0

      - name: Install Poetry dynamic versioning
        run: pipx inject poetry poetry-dynamic-versioning[plugin]==1.0.1 ${{ inputs.EXTRA_POETRY_INJECT_ARGS }}

      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      - name: Check poetry lock file
        run: poetry lock --check

      - name: Check package versions
        if: inputs.CHECK_PACKAGE_VERSION
        shell: python
        run: |
          import os
          import subprocess
          import sys
          from typing import NoReturn
          import tomlkit
          from packaging.version import Version


          def run_command(*cmd) -> str:
              return subprocess.check_output(cmd, encoding="utf-8").strip()


          def gh_command(kind: str, msg: str):
              print(f"::{kind}::{msg}" if "CI" in os.environ else msg)


          def fail_with(msg: str) -> NoReturn:
              gh_command("error", msg)
              sys.exit(1)


          with open("pyproject.toml", "r") as h:
              project = tomlkit.load(h)
              projectVersion = Version(project["tool"]["poetry"]["version"])

          actualVersion = Version(run_command("poetry", "version", "-s"))

          if projectVersion == actualVersion:
              gh_command("warning", "poetry-dynamic-versioning is not set up on this repo")
          elif projectVersion.release[0:2] != actualVersion.release[0:2]:
              # Only compare the major and minor version.
              fail_with(
                  f"Version in pyproject.toml ({projectVersion}) does not match "
                  f"git-derived version ({actualVersion}).",
              )

          if os.path.isfile("setup.py"):
              setupVersion = Version(run_command("python", "setup.py", "--version"))
              if setupVersion.base_version != str(projectVersion):
                  fail_with(
                      f"Version in pyproject.toml ({projectVersion}) and setup.py "
                      f"({setupVersion}) do not match.",
                  )

      - name: Build wheel
        run: poetry build -f wheel

      - uses: actions/upload-artifact@v4
        with:
          name: wheel-${{ matrix.os }}-py${{ matrix.python }}
          path: ./dist/*whl
          if-no-files-found: error
          retention-days: 1

  upload_wheels:
    needs: build_wheels
    if: github.event_name == 'push'
    container: ghcr.io/oxionics/poetry:1.22-py3.10
    runs-on:
      group: Default
      labels: self-hosted
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check if files other than poetry.lock have changed
        id: poetry-lock-changed
        uses: tj-actions/changed-files@v44
        with:
          files: poetry.lock

      - uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Extract wheels
        run: |
          mkdir -p dist
          mv artifacts/*/* dist

      - name: Install Poetry dynamic versioning
        run: pipx inject poetry poetry-dynamic-versioning[plugin]==1.0.1 ${{ inputs.EXTRA_POETRY_INJECT_ARGS }}

      - name: Configure poetry
        run: |
          poetry config repositories.oxionics ${{ secrets.PYPI_SERVER }}
          poetry config http-basic.oxionics \
            ${{ secrets.PYPI_LOGIN }} ${{ secrets.PYPI_PASSWORD }}

      - name: Upload wheel
        if: |
          steps.poetry-lock-changed.outcome == 'skipped' ||
          steps.poetry-lock-changed.outputs.only_modified == 'false'
        run: poetry publish -r oxionics
        env:
          PIP_REQUESTS_TIMEOUT: 300
          POETRY_REQUESTS_TIMEOUT: 300
