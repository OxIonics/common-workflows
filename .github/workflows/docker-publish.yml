name: Docker

on:
  workflow_call:
    inputs:
      IMAGE_NAME:
        required: false
        default: ${{ github.event.repository.name }}
        type: string
      BUILD_ARGS:
        required: false
        type: string

jobs:
  push:

    runs-on: self-hosted

    steps:
      - uses: actions/checkout@v2

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Test
        run: |
          echo "env"
          env
          echo "end env"
          echo "id = "$(id)
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}


      - name: Build image
        run: |
          echo docker build . --tag ${{ inputs.IMAGE_NAME}}:$GITHUB_RUN_NUMBER ${{ inputs.BUILD_ARGS }}
          docker build . --tag ${{ inputs.IMAGE_NAME}}:$GITHUB_RUN_NUMBER ${{ inputs.BUILD_ARGS }}

      - name: Push image to GitHub Container Registry
        if: github.event_name == 'push'
        run: |
          IMAGE_NAME=${{ inputs.IMAGE_NAME }}
          IMAGE_ID=ghcr.io/${{ github.repository_owner }}/$IMAGE_NAME
          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')
          # Use Docker `latest` tag convention
          [ "$VERSION" == "main" -o "$VERSION" == "master" ] && VERSION=latest
          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION
          docker tag $IMAGE_NAME $IMAGE_ID:$VERSION
          docker push $IMAGE_ID:$VERSION

      - name: Clean up image
        run: docker image rm ${{ inputs.IMAGE_NAME }}:$GITHUB_RUN_NUMBER
