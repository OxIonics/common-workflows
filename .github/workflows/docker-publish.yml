name: Docker

on:
  workflow_call:
    inputs:
      IMAGE_NAME:
        required: false
        default: ${{ github.event.repository.name }}
        type: string
      BUILD_ARGS:
        required: false
        type: string
      TAG_SUFFIX:
        required: false
        type: string
        default: ""

jobs:
  push:

    runs-on:
      group: Default
      labels: self-hosted

    concurrency:
      # If triggered by a push, we will upload the image to the container
      # registry. Logging in/out of the registry from jobs running in parallel
      # seems to interfere with each other.
      group: "${{ github.event_name == 'push' && 'ghcr-login' || null }}"

    steps:
      - uses: actions/checkout@v3

      - name: Build image
        run: |
          set -x
          docker build . --iidfile image_id --tag ${{ inputs.IMAGE_NAME }}:$GITHUB_RUN_NUMBER${{ inputs.TAG_SUFFIX }} ${{ inputs.BUILD_ARGS }}

      - name: Login to GitHub Container Registry
        if: github.event_name == 'push'
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Push image to GitHub Container Registry
        if: github.event_name == 'push'
        run: |
          set -x
          IMAGE_NAME=${{ inputs.IMAGE_NAME }}
          IMAGE_ID=ghcr.io/${{ github.repository_owner }}/$IMAGE_NAME
          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')
          # Use Docker `latest` tag convention
          [ "$VERSION" == "main" -o "$VERSION" == "master" ] && VERSION=latest
          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION
          TAG="$VERSION${{ inputs.TAG_SUFFIX }}"
          echo TAG=$TAG
          docker tag "$(cat image_id)" $IMAGE_ID:$TAG
          docker push $IMAGE_ID:$TAG

      - name: Clean up image
        run: docker image rm ${{ inputs.IMAGE_NAME }}:$GITHUB_RUN_NUMBER${{ inputs.TAG_SUFFIX }}
